#!/bin/bash
#
# bee-list - list bee packages
#
# Copyright (C) 2009-2011
#       Marius Tolzmann <tolzmann@molgen.mpg.de>
#       Tobias Dreyer <dreyer@molgen.mpg.de>
#       and other bee developers
#
# This file is part of bee.
#
# bee is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

#
#  bee list -i - list installed
#  bee list -a - list available
#  bee list -u - list updateable
#  bee list -U - list uninstalled
#  bee list -s - list status (installed, uninstalled, updateable, available)
#  --sorted    - pipe through beesort
#  --max       - only list highest versions
#  --format "" - print formated
#


if [ -z "${BEE_VERSION}" ] ; then
    echo >&2 "BEE-ERROR: please call $0 from bee .."
    exit 1
fi

VERSION=${BEE_VERSION}

: ${BEE_BINDIR:=@BINDIR@}
: ${BEESORT:=${BEE_BINDIR}/beesort}

#
# BUGS TO FIX/FEATURES TO ADD:
#   - lists are alpha-num sorted and not as pkg-versions ..
#   - check for grep -P support and use it..

ARCH=$(uname -m)

#
# print usage information
#
usage() {
    cat <<-EOF
	bee-list v${VERSION} 2009-2012
	  by Marius Tolzmann and Tobias Dreyer <{tolzmann,dreyer}@molgen.mpg.de>
	     Max Planck Institute for Molecular Genetics Berlin Dahlem

	Usage: bee list <action> [pattern list]

	Actions:
	    -i | --installed (default) list installed pkgs matching pattern list
	    -a | --available           list available pkgs matching pattern list

	EOF
}

function config_init_colors() {
    if [ -t 1 ] ; then
        COLOR_NORMAL="\\033[0;39m\\033[0;22m"
        COLOR_GREEN="\\033[0;32m"
        COLOR_YELLOW="\\033[0;33m"
        COLOR_RED="\\033[0;31m"
        COLOR_CYAN="\\033[0;36m"
        COLOR_BLUE="\\033[0;34m"
        COLOR_PURPLE="\\033[0;35m"
        COLOR_BRACKET=${COLOR_PURPLE}
        COLOR_BRCONTENT=${COLOR_YELLOW}
        COLOR_INFO=${COLOR_GREEN}
        COLOR_ERROR=${COLOR_RED}
        COLOR_WARN=${COLOR_YELLOW}
        COLOR_INSTALLABLE="${COLOR_YELLOW}installable${COLOR_NORMAL} "
        COLOR_UPDATEABLE=" ${COLOR_GREEN}updateable${COLOR_NORMAL} "
    else
        COLOR_NORMAL=""
        COLOR_GREEN=""
        COLOR_YELLOW=""
        COLOR_RED=""
        COLOR_CYAN=""
        COLOR_BLUE=""
        COLOR_PURPLE=""
        COLOR_BRACKET=""
        COLOR_BRCONTENT=""
        COLOR_INFO="**INFO** "
        COLOR_ERROR="**ERROR** "
        COLOR_WARN="**WARNING** "
        COLOR_INSTALLABLE="installable "
        COLOR_UPDATEABLE=" updateable "
    fi
}

function print_warning() {
    echo >&2 -e "WARNING: ${@}"
}

function list_installed_packages() {
    if [ ! -r "${BEE_METADIR}" ] ; then
        print_warning "can't read BEE_METADIR '${BEE_METADIR}' .. aborting"
        return
    fi
    find ${BEE_METADIR} -mindepth 1 -maxdepth 1 -type d -printf "%f\n"
}

function list_available_packages() {
    : ${BEE_PKGPATH:=${BEE_PKGDIR}}

    path=${BEE_PKGPATH//:/ }

    search=""
    for p in ${path} ; do
        if [ -r "${p}" ] ; then
            search="${search} ${p}"
        else
            print_warning "can't read BEE_PKGPATH element '${p}' .. skipping."
        fi
    done

    if [ -z "${search}" ] ; then
        print_warning "empty search path .. aborting."
        return
    fi

    if [ "${OPT_PATHNAME}" == "yes" ] ; then
        find ${search} -mindepth 1 -maxdepth 1 -printf "%p\n"
    else
        find ${search} -mindepth 1 -maxdepth 1 -printf "%f\n" \
            | sed -e "s@\.iee\.tar\..*\$@@" \
                  -e "s@\.bee\.tar\..*\$@@"
    fi
}

function list_installed() {
    list_installed_packages | ${BEESORT}
}

function list_available() {
    list_available_packages | ${BEESORT}
}

#
# list bee packages
#   ARGUMENTS are $mode (installed|available) and a list of $patterns
#   RETURNS a list of $mode packages matching all given $patterns
#
list_beepackages() {
    mode=${1}
    shift

    # if more than one pattern is given all patterns have to match (AND)
    thegrep=""
    for p in "${@}" ; do
        thegrep="${thegrep} | grep -i -F -e '${p}' "
    done

    if [ "${mode}" = "available" ] ; then
        list_cmd="list_available"
    else
        list_cmd="list_installed"
    fi

    # execute the search and display results..
    eval ${list_cmd} ${thegrep}
}


################################################################################
################################################################################
################################################################################

options=$(${BEE_BINDIR}/beegetopt --name bee-list \
                 --option available/a \
                 --option installed/i \
                 --option updateable/u \
                 --option display-pathname \
                 --option exact/by-pkgfullname \
                 --option help/h \
                 --option debug \
                 -- "$@")

if [ $? != 0 ] ; then
    usage
    exit 1
fi

eval set -- "${options}"

filter=""

OPT_EXACT="no"
OPT_PATHNAME="no"
OPT_UPDATEABLE="no"

DEBUG=":"
while true ; do
    case "$1" in
        --help)
            usage
            exit 0
            ;;
        --available)
            shift
            filter="available"
            ;;
        --installed)
            shift
            filter="installed"
            ;;
        --updateable)
            shift;
            OPT_UPDATEABLE="yes"
            ;;
        --exact)
            shift
            OPT_EXACT="yes"
            ;;
        --display-pathname)
            shift
            OPT_PATHNAME="yes"
            ;;
        --debug)
            shift
            DEBUG="echo"
            ;;
        --)
            shift
            break
            ;;
    esac
done

config_init_colors

if [ "${OPT_EXACT}" = "yes" ] ; then
    if [ ! -z ${2} ] ; then
        echo >&2 "argument error: --by-pkgfullname only takes one package at a time .."
        exit 1
    fi

    for p in $(list_beepackages "${filter}" ${1}) ; do
        pname=$(@BINDIR@/beeversion --pkgfullname "${p}")
        pfull=$(@BINDIR@/beeversion --pkgfullpkg  "${p}")
        if [ "${1}" = "${pname}"  ] ; then
            echo "${p}"
        fi
        if [ "${1}" = "${pfull}"  ] ; then
            echo "${p}"
        fi
        if [ "${1}" = "${p}" ] ; then
            echo "${p}"
        fi
    done
    exit 0
fi

function list_updateable() {
    local search=${1}

    pkgs=$(list_beepackages "available" ${search})

    if [ -z "${pkgs}" ] ; then
        return
    fi

    pkgs=$(${BEE_BINDIR}/beeversion --max ${pkgs})
    for a in ${pkgs} ; do
        pname=$(${BEE_BINDIR}/beeversion --pkgfullname "${a}")
        installed=$(${BEE_LIBEXECDIR}/bee/bee.d/bee-list --exact "${pname}")
        if [ -z "${installed}" ] ; then
           echo -e "${COLOR_INSTALLABLE}${a}${COLOR_NORMAL}"
           continue
        fi
        maxinstalled=$(${BEE_BINDIR}/beeversion --max ${installed})
        maxall=$(${BEE_BINDIR}/beeversion --max ${maxinstalled} ${a})
        if [ "${maxall}" != "${maxinstalled}" ] ; then
            echo -e "${COLOR_UPDATEABLE}${a}${COLOR_NORMAL}"
        fi
    done
}

if [ "${OPT_UPDATEABLE}" = "yes" ] ; then
    if [ ! ${#@} -gt 0 ] ; then
        list_updateable
    fi

    for p in "${@}" ; do
        list_updateable ${p}
    done
    exit 0
fi


# mach et einfach.. (just do it)
if [ ! ${#@} -gt 0 ] ; then
    list_beepackages "${filter}"
fi

for p in "${@}" ; do
    list_beepackages "${filter}" ${p}
done
