#!/bin/bash
#
# bee-remove - remove a installed bee-pkg
#
# Copyright (C) 2009-2011
#       Marius Tolzmann <tolzmann@molgen.mpg.de>
#       Tobias Dreyer <dreyer@molgen.mpg.de>
#       and other bee developers
#
# This file is part of bee.
#
# bee is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

if [ -z "${BEE_VERSION}" ] ; then
    echo >&2 "BEE-ERROR: please call $0 from bee .."
    exit 1
fi

VERSION=${BEE_VERSION}

pkg_remove_all() {
    for pkg in ${@} ; do
        pkg_remove ${pkg}
    done
}

pkg_remove() {
    search=$1

    # pattern is absolute path to pkg
    if [ -d "${search}" ] ; then
        do_remove "${search}"
        return
    fi

    # pattern is a pkg in BEE_METADIR
    if [ -d "${BEE_METADIR}/${search}" ] ; then
        do_remove ${BEE_METADIR}/${search}
        return
    fi

    # pattern is no installed pkg
    # show all pkgs that match pattern
    echo "${search} matches following packages .."
    ${BEE_LIBEXECDIR}/bee/bee.d/bee-list -i "${search}"
}

do_remove() {
    pkg=${1}

    FILES=$(${BEE_LIBEXECDIR}/bee/bee.d/bee-dep remove --print ${pkg##*/})
    if [ $? -ne 0 ] ; then
        echo "removal of ${pkg##*/} failed"
        exit 1
    fi

    [ "${NOOP}" != "yes" ] && run_hooks pre-remove ${pkg}

    # removing files
    for f in $FILES ; do
        if [ -d "${f}" -a ! -h "$f" ] ; then
            ${NOOP:+echo} rmdir -v ${f}
        else
            ${NOOP:+echo} rm -fv ${f}
        fi
    done

    [ "${NOOP}" != "yes" ] && run_hooks post-remove ${pkg}

    if [ -r "${pkg}/META" ] ; then
        . ${pkg}/META
    fi

    # removing empty basedirs
    if [ "${BEEMETAFORMAT}" = "2" ] ; then
        dirs=$(for var in ${!PKG_*} ; do eval echo \${${var}} ; done | sort -ur)
        for dir in ${dirs} ; do
            if [ -d "${dir}" -a -z "$(${BEE_LIBEXECDIR}/bee/bee.d/bee-query ${dir} | head -1)" ] ; then
                ${NOOP:+echo} rmdir ${dir}
            fi
        done
    fi

    #cleaning up meta directory
    if [ -d "${pkg}" ] ; then
        ${NOOP:+echo} rm -vfr ${pkg}
    fi
}

function run_hooks() {
    local action=${1}
    local pkg=${2##*/}

    for t in ${BEE_LIBEXECDIR}/bee/hooks.d/* ; do
        ${t} ${action} ${pkg}
    done
}

usage() {
    cat <<-EOF
	bee-remove v${VERSION} 2009-2011
	  by Marius Tolzmann and Tobias Dreyer <{tolzmann,dreyer}@molgen.mpg.de>
	     Max Planck Institute for Molecular Genetics Berlin Dahlem

	Usage: bee remove [options] <package>

	Options:
	    -h | --help    display this help
	    -n | --noop    do not actually remove; just print

	EOF
}

options=$(getopt -n bee-remove \
                 -o n,h \
                 --long noop,help \
                 -- "$@")
if [ $? != 0 ] ; then
    usage
    exit 1
fi
eval set -- "${options}"

while true ; do
    case "$1" in
        -n|--noop)
            shift
            NOOP="yes"
            ;;
        -h|--help)
            usage
            exit
            ;;
        --)
            shift
            if [ -z "${1}" ] ; then
                usage
                exit 1
            fi
            pkg_remove_all "$@"
            break
            ;;
    esac
done
